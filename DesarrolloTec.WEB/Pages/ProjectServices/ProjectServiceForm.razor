@using DesarrolloTec.Shared.Entities
@using DesarrolloTec.Shared.Enums

@inject SweetAlertService swal
@inject NavigationManager navigationManager
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />

 
    <div class="mb-3">
        <label>Proyecto:</label>
        <div>
            <InputSelect @bind-Value="ProjectService.ProjectId">
                <option value="">Selecciona un proyecto</option>
                @foreach (var project in projects)
                {
                    <option value="@project.Id">@project.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ProjectService.ProjectId)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Servicio:</label>
        <div>
            <InputSelect @bind-Value="ProjectService.ServicesId">
                <option value="">Selecciona un servicio</option>
                @foreach (var service in services)
                {
                    <option value="@service.Id">@service.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ProjectService.ServicesId)" />
        </div>
    </div>


    <button class="btn btn-primary" type="submit">guardar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>

</EditForm>

@code {
    private EditContext editContext = null;
    private List<Project> projects = new();
    private List<Service> services = new();

    protected override async void OnInitialized()
    {
        editContext = new(ProjectService);

        // Cargar proyectos y servicios desde el repositorio
        var projectResponse = await repository.GetAsync<List<Project>>("/api/projects");
        var serviceResponse = await repository.GetAsync<List<Service>>("/api/services");

        if (projectResponse.Response != null)
        {
            projects = projectResponse.Response;
        }

        if (serviceResponse.Response != null)
        {
            services = serviceResponse.Response;
        }
    }

    [EditorRequired]
    [Parameter]
    public ProjectService ProjectService { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
