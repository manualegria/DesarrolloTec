@page "/projectservice/edit/{id:int}"
@using CurrieTechnologies.Razor.SweetAlert2
@using DesarrolloTec.Shared.Entities
@using DesarrolloTec.WEB.Repositories

@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

@if (projectService is null)
{
    <p>Cargando ...</p>
}
else
{
    <ProjectServiceForm @ref="ProjectServiceForm" ProjectService="projectService" OnSubmit="Edit" ReturnAction="Return" />
}

@code {
    private ProjectService projectService;
    private ProjectServiceForm ProjectServiceForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.GetAsync<ProjectService>($"api/projectServices/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/projectServices");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            projectService = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.PutAsync("api/projectServices", projectService);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            ProjectServiceForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("/projectservices");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("/projectservices");
    }
}
