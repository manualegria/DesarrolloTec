@page "/invoices"
@using CurrieTechnologies.Razor.SweetAlert2
@using DesarrolloTec.Shared.Entities
@using DesarrolloTec.Shered.Entities
@using DesarrolloTec.WEB.Repositories
@using DesarrolloTec.WEB.Shared

@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager

<div class="mb-3">
    <a class="btn btn-primary" href="/invoice/create">Crear Factura</a>
</div>

<div class="mb-3">
    <input type="text" @bind="searchTerm" placeholder="Buscar por Cliente o Proyecto" class="form-control" />
    <button class="btn btn-secondary mt-2" @onclick="Search">Buscar</button>
    <button class="btn btn-outline-secondary mt-2" @onclick="ClearSearch">Limpiar</button>
</div>

<GenericList MyList="filteredInvoices">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Fecha de Expedición</th>
                    <th>Estado del Pago</th>
                    <th>Cliente</th>
                    <th>Proyecto</th>
                    <th>Monto Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var invoice in filteredInvoices)
                {
                    <tr>
                        <td>@invoice.DateIssued</td>
                        <td>@invoice.PaymentStatus</td>
                        <td>@invoice.Customers?.Name</td>
                        <td>@invoice.Projects?.Name</td>
                        <td>@invoice.TotalAmount</td>

                        <td>
                            <a href="/invoice/edit/@invoice.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick="() => DeleteAsync(invoice)">Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

<script>
    window.disableUnloadWarning = function () {
        window.onbeforeunload = null; // Deshabilitar la alerta de salida
    };
</script>

@code {
    public List<Invoice> Invoices { get; set; }
    public List<Invoice> filteredInvoices { get; set; }
    public string searchTerm { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Invoice>>("/api/invoices");
        Invoices = responseHppt.Response!;
        filteredInvoices = Invoices; // Inicializar con todas las facturas
    }

    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredInvoices = Invoices;
        }
        else
        {
            filteredInvoices = Invoices.Where(i =>
                i.Customers?.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                i.Projects?.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true
            ).ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        filteredInvoices = Invoices; // Restablecer la lista a todas las facturas
    }

    private async Task DeleteAsync(Invoice invoice)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro que quiere borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/invoices/{invoice.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}
