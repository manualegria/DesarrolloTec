@using DesarrolloTec.Shared.Entities


@inject SweetAlertService swal
@inject NavigationManager navigationManager

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Nombre:</label>
        <div>
            <InputText width="10" @bind-Value="Employee.FirstName" />
            <ValidationMessage For="@(()=>Employee.FirstName )" />
        </div>
    </div>

    <div class="mb-3">
        <label>Apellidos:</label>
        <div>
            <InputText width="10" @bind-Value="Employee.LastName" />
            <ValidationMessage For="@(()=>Employee.LastName )" />
        </div>
    </div>

    <div class="mb-3">
        <label>Cargo:</label>
        <div>
            <InputText width="10" @bind-Value="Employee.Position" />
            <ValidationMessage For="@(()=>Employee.Position)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Especialidad:</label>
        <div>
            <InputText width="10" @bind-Value="Employee.Specialization" />
            <ValidationMessage For="@(()=>Employee.Specialization)" />
        </div>
    </div>

    
    <div class="mb-3">
        <label>Correo:</label>
        <div>
            <InputText width="10" @bind-Value="Employee.Email" />
            <ValidationMessage For="@(()=>Employee.Email)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Telefono:</label>
        <div>
            <InputText width="10" @bind-Value="Employee.Phone" />
            <ValidationMessage For="@(()=>Employee.Phone)" />
        </div>
    </div>


    <button class="btn btn-primary" type="submit">guardar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>




</EditForm>



@code {
    private EditContext editContext = null;

    protected override void OnInitialized()
    {
        editContext = new(Employee);
    }


    [EditorRequired]
    [Parameter]
    public Employee Employee { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]

    public EventCallback ReturnAction { get; set; }

  
    private async Task HandleSubmit()
    {
        FormPostedSuccessfully = true;
        await OnSubmit.InvokeAsync(null);
    }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (formWasEdited && !FormPostedSuccessfully)
        {
            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = "¿Deseas abandonar la página y perder los cambios?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true
                });

            var confirm = !string.IsNullOrEmpty(result.Value);

            if (!confirm)
            {
                context.PreventNavigation();
            }
        }
    }
    }