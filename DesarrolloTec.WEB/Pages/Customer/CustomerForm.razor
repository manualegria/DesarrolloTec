@using DesarrolloTec.Shared.Entities


@inject SweetAlertService swal
@inject NavigationManager navigationManager

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">

        <label>Nombre:</label>
        <div>
            <InputText width="10" @bind-Value="Customer.Name" />
            <ValidationMessage For="@(()=>Customer.Name )" />
        </div>
    </div>

    <div class="mb-3">
        <label>Tipo de Cliente:</label>
        <div>
            <InputText width="10" @bind-Value="Customer.Type" />
            <ValidationMessage For="@(()=>Customer.Type)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Direccion:</label>
        <div>
            <InputText width="10" @bind-Value="Customer.Address" />
            <ValidationMessage For="@(()=>Customer.Address)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Telefono:</label>
        <div>
            <InputText width="10" @bind-Value="Customer.Phone" />
            <ValidationMessage For="@(()=>Customer.Phone)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Correo:</label>
        <div>
            <InputText width="10" @bind-Value="Customer.Email" />
            <ValidationMessage For="@(()=>Customer.Email)" />
        </div>
    </div>

    <div class="mb-3">
        <label>NIT o Cedula:</label>
        <div>
            <InputText width="10" @bind-Value="Customer.Nit" />
            <ValidationMessage For="@(()=>Customer.Nit)" />
        </div>
    </div>


    <button class="btn btn-primary" type="submit">guardar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>




</EditForm>



@code {
    private EditContext editContext = null;

    protected override void OnInitialized()
    {
        editContext = new(Customer);
    }


    [EditorRequired]
    [Parameter]
    public Customer Customer { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]

    public EventCallback ReturnAction { get; set; }


    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}