@page "/project/edit/{id:int}"
@using CurrieTechnologies.Razor.SweetAlert2
@using DesarrolloTec.Shered.Entities
@using DesarrolloTec.WEB.Repositories

@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal




@if (Project is null)
{
    
    <p>Cargando ...</p>


}
else
{
    <ProjectForm @ref="ProjectForm" Project="Project" OnSubmit="Edit" ReturnAction="Return" />



}



@code {

    private Project Project;
    private ProjectForm ProjectForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.GetAsync<Project>($"api/projects/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("projects");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            Project = responseHTTP.Response;
        }
    }
    private async Task Edit()
    {
        var responseHTTP = await repository.PutAsync("api/projects", Project);

        if (responseHTTP.Error)
        {
            // Obtener y mostrar más información del error si es posible.
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError ?? "Ha ocurrido un error inesperado", SweetAlertIcon.Error);
        }
        else
        {
            ProjectForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("/projects");
        }
    }


    private void Return()
    {
        navigationManager.NavigateTo("/projects");
    }
}
