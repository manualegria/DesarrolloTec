@page "/customer/create"
@using DesarrolloTec.Shared.Entities
@using CurrieTechnologies.Razor.SweetAlert2

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Crear Cliente</h3>
<CustomerForm @ref="customerForm" Customer="Customer" OnSubmit="Create" ReturnAction="Return" />

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? From { get; set; } // Captura el parámetro de consulta

    private Customer Customer = new();
    private CustomerForm customerForm;

    private async Task Create()
    {
        var responseHttp = await repository.PostAsync("/api/customers", Customer);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {

             customerForm!.FormPostedSuccessfully = true;
            await swal.FireAsync("Éxito", "El cliente se ha creado correctamente.");
          //customerForm.ResetFormPostedSuccessfully();
            navigationManager.NavigateTo("/customers"); // Regresa al índice de clientes por defecto
            
        }
    }

    private void Return()
    {
        
        navigationManager.NavigateTo("/customers");
        
    }
}
