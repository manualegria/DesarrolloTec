@page "/services"
@using CurrieTechnologies.Razor.SweetAlert2
@using DesarrolloTec.Shared.Entities
@using DesarrolloTec.Shered.Entities
@using DesarrolloTec.WEB.Repositories
@using DesarrolloTec.WEB.Shared

@inject IRepository repository 
@inject SweetAlertService swal
@inject NavigationManager navigationManager



<div class="mb-3">


    <a class="btn btn-primary " href="/services/create">Crear Servicio</a>

</div>

<GenericList MyList="Services">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Descripcion</th>
                    <th>Precio Estimado</th>
                   

                </tr>
            </thead>
            <tbody>
                @foreach (var service in Services!)
                {
                    <tr>
                        
                        <td> @service.Name </td>
                        <td>@service.Description</td>
                        <td> @service.EstimatedPrice</td>


                        <td>
                            <a href="/service/edit/@service.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=>DeleteAsync(service))>Borrar</button>
                          @*   <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(service))><i class="oi oi-trash" /> Borrar</button> *@
                        </td>

                    </tr>
                }
            </tbody>
        </table>

    </Body>
 
</GenericList>


<script>
    window.disableUnloadWarning = function () {
        window.onbeforeunload = null; // Deshabilitar la alerta de salida
    };
</script>



@code {


    public List<Service> Services { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Service>>("/api/services");
        Services = responseHppt.Response!;
    }

    private async Task DeleteAsync(Service Service)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/services/{Service.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}