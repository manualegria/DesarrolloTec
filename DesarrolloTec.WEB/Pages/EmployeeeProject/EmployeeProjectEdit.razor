@page "/employeeproject/edit/{id:int}"
@using CurrieTechnologies.Razor.SweetAlert2
@using DesarrolloTec.Shared.Entities
@using DesarrolloTec.WEB.Repositories

@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

@if (employeeProject is null)
{
    <p>Cargando ...</p>
}
else
{
    <EmployeeprojectForm @ref="EmployeeProjectForm" EmployeeProject="employeeProject" OnSubmit="Edit" ReturnAction="Return" />
}

@code {
    private EmployeeProject employeeProject;
    private EmployeeprojectForm EmployeeProjectForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.GetAsync<EmployeeProject>($"api/employeeProject/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/employeeprojects");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            employeeProject = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.PutAsync("api/employeeProject", employeeProject);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            EmployeeProjectForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("/employeeprojects");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("/employeeprojects");
    }
}
